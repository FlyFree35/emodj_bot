import os
import asyncio
from telegram import (
    Update, ReplyKeyboardMarkup,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)
from youtubesearchpython import VideosSearch
from pytube import YouTube
import uuid  # –î–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤

# –¢–æ–∫–µ–Ω –∏ URL (—É–∫–∞–∂–∏ —Å–≤–æ–∏)
TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = "https://emodj-bot-1.onrender.com"

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if not os.path.exists("downloads"):
    os.makedirs("downloads")

# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞, —á—Ç–æ–±—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞–ª–∏
download_lock = asyncio.Lock()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
keyboard = [
    ["üîç –ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏—Å—Ç—É", "üéµ –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"],
    ["üé≠ –ù–∞–π—Ç–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
]
markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üé∂ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ EmoDJ ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç –º—É–∑—ã–∫—É –ø–æ —Ç–≤–æ–µ–º—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é, –∞—Ä—Ç–∏—Å—Ç—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é!\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá",
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip().lower()

    if text == "üîç –ø–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏—Å—Ç—É".lower():
        context.user_data["mode"] = "artist"
        await update.message.reply_text("üé§ –í–≤–µ–¥–∏ –∏–º—è –∞—Ä—Ç–∏—Å—Ç–∞:")
    elif text == "üéµ –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é".lower():
        context.user_data["mode"] = "title"
        await update.message.reply_text("üé∂ –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏:")
    elif text == "üé≠ –Ω–∞–π—Ç–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é".lower():
        context.user_data["mode"] = "mood"
        await update.message.reply_text("üß† –í–≤–µ–¥–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –≥—Ä—É—Å—Ç–Ω–æ, –≤–µ—Å–µ–ª–æ, –º–æ—Ç–∏–≤–∞—Ü–∏—è):")
    elif text == "‚öôÔ∏è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏".lower():
        await update.message.reply_text("‚öôÔ∏è –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
    else:
        await process_query(update, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
async def process_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    mode = context.user_data.get("mode")
    query = update.message.text.strip()

    if mode == "artist":
        search_query = f"{query} official music"
    elif mode == "title":
        search_query = f"{query} official audio"
    elif mode == "mood":
        search_query = f"{query} music playlist"
    else:
        await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é.")
        return

    search = VideosSearch(search_query, limit=1)
    result = search.result()

    if result['result']:
        video = result['result'][0]
        title = video['title']
        url = video['link']

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∞, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —Å–∫–∞—á–∞—Ç—å
        context.user_data["last_track"] = {"title": title, "url": url}

        # –ö–Ω–æ–ø–∫–∏: —Å—Å—ã–ª–∫–∞ –∏ —Å–∫–∞—á–∞—Ç—å MP3
        buttons = [
            [InlineKeyboardButton("üîó –°–ª—É—à–∞—Ç—å –Ω–∞ YouTube", url=url)],
            [InlineKeyboardButton("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å MP3", callback_data="download_mp3")]
        ]
        await update.message.reply_text(
            f"üéß –ù–∞–π–¥–µ–Ω–∞ –ø–µ—Å–Ω—è: {title}\n–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
    else:
        await update.message.reply_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ inline (—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ MP3)
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "download_mp3":
        track = context.user_data.get("last_track")
        if not track:
            await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        url = track["url"]
        title = track["title"]

        await query.edit_message_text(f"‚¨áÔ∏è –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ: {title} ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")

        # –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        async with download_lock:
            try:
                yt = YouTube(url)
                audio_stream = yt.streams.filter(only_audio=True).order_by("abr").desc().first()

                if not audio_stream:
                    await context.bot.send_message(chat_id=update.effective_chat.id, text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫.")
                    return

                # –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                file_name = f"downloads/{uuid.uuid4()}.mp3"
                audio_stream.download(output_path="downloads", filename=file_name.split('/')[-1])

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                with open(file_name, "rb") as audio_file:
                    await context.bot.send_audio(chat_id=update.effective_chat.id, audio=audio_file, title=title)

                os.remove(file_name)
                await context.bot.send_message(chat_id=update.effective_chat.id, text="‚úÖ –ì–æ—Ç–æ–≤–æ! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è üé∂")

            except Exception as e:
                await context.bot.send_message(chat_id=update.effective_chat.id, text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")

# –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons))
app.add_handler(CallbackQueryHandler(handle_callback))

app.run_webhook(
    listen="0.0.0.0",
    port=int(os.environ.get("PORT", 8443)),
    webhook_url=WEBHOOK_URL
)

