# -*- coding: utf-8 -*-
import os
import sys
import io

# –ó–∞—â–∏—Ç–∞ –æ—Ç UnicodeEncodeError –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —ç–º–æ–¥–∑–∏
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='replace')

import asyncio
from telegram import (
    Update, ReplyKeyboardMarkup,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)
from youtubesearchpython import VideosSearch

TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = "https://emodj-bot-1.onrender.com"

keyboard = [
    ["üîç –ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏—Å—Ç—É", "üéµ –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"],
    ["üé≠ –ù–∞–π—Ç–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
]
markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üé∂ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ EmoDJ!\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá",
        reply_markup=markup
    )

async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip().lower()

    if text == "üîç –ø–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏—Å—Ç—É".lower():
        context.user_data["mode"] = "artist"
        await update.message.reply_text("üé§ –í–≤–µ–¥–∏ –∏–º—è –∞—Ä—Ç–∏—Å—Ç–∞:")
    elif text == "üéµ –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é".lower():
        context.user_data["mode"] = "title"
        await update.message.reply_text("üé∂ –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏:")
    elif text == "üé≠ –Ω–∞–π—Ç–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é".lower():
        context.user_data["mode"] = "mood"
        await update.message.reply_text("üß† –í–≤–µ–¥–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (–Ω–∞–ø—Ä.: –≤–µ—Å–µ–ª–æ, –≥—Ä—É—Å—Ç–Ω–æ):")
    elif text == "‚öôÔ∏è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏".lower():
        await update.message.reply_text("‚öôÔ∏è –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
    else:
        await process_query(update, context)

async def process_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    mode = context.user_data.get("mode")
    query = update.message.text.strip()

    if mode == "artist":
        search_query = f"{query} official music"
    elif mode == "title":
        search_query = f"{query} official audio"
    elif mode == "mood":
        search_query = f"{query} music playlist"
    else:
        await update.message.reply_text("‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é.")
        return

    search = VideosSearch(search_query, limit=1)
    result = search.result()

    if result['result']:
        video = result['result'][0]
        title = video['title']
        url = video['link']

        context.user_data['last_track'] = {'title': title, 'url': url}

        buttons = [
            [InlineKeyboardButton("üîó –°–ª—É—à–∞—Ç—å –Ω–∞ YouTube", url=url)],
            [InlineKeyboardButton("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å MP3", callback_data="download_mp3")]
        ]

        await update.message.reply_text(
            f"üéµ –ù–∞–π–¥–µ–Ω–∞ –ø–µ—Å–Ω—è: {title}\n–ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
    else:
        await update.message.reply_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")

# –í–†–ï–ú–ï–ù–ù–ê–Ø –ó–ê–ì–õ–£–®–ö–ê –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–∫–∞—á–∞—Ç—å MP3"
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "download_mp3":
        track = context.user_data.get("last_track")
        if not track:
            await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: —Ç—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        title = track["title"]

        await query.edit_message_text(
            f"üéµ –¢—Ä–µ–∫: *{title}*\n\n"
            "üîß –§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è MP3 —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!\n"
            "–°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ EmoDJ üéß",
            parse_mode="Markdown"
        )

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons))
app.add_handler(CallbackQueryHandler(handle_callback))

app.run_webhook(
    listen="0.0.0.0",
    port=int(os.environ.get("PORT", 8443)),
    webhook_url=WEBHOOK_URL
)

