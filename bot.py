import os
import asyncio
from telegram import (
    Update, ReplyKeyboardMarkup,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)
from youtubesearchpython import VideosSearch
import yt_dlp  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–º–µ—Å—Ç–æ pytube
import uuid

# –¢–æ–∫–µ–Ω –∏ URL (—É–∫–∞–∂–∏ —Å–≤–æ–∏)
TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = "https://emodj-bot-1.onrender.com"

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if not os.path.exists("downloads"):
    os.makedirs("downloads")

# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞, —á—Ç–æ–±—ã —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞–ª–∏
download_lock = asyncio.Lock()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
keyboard = [
    ["üîç –ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏—Å—Ç—É", "üéµ –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"],
    ["üé≠ –ù–∞–π—Ç–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
]
markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üé∂ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ EmoDJ!\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá",
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip().lower()

    if text == "üîç –ø–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏—Å—Ç—É".lower():
        context.user_data["mode"] = "artist"
        await update.message.reply_text("üé§ –í–≤–µ–¥–∏ –∏–º—è –∞—Ä—Ç–∏—Å—Ç–∞:")
    elif text == "üéµ –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é".lower():
        context.user_data["mode"] = "title"
        await update.message.reply_text("üé∂ –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏:")
    elif text == "üé≠ –Ω–∞–π—Ç–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é".lower():
        context.user_data["mode"] = "mood"
        await update.message.reply_text("üß† –í–≤–µ–¥–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (\u043d–∞–ø—Ä.: –≤–µ—Å–µ–ª–æ, –≥—Ä—É—Å—Ç–Ω–æ):")
    elif text == "‚öôÔ∏è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏".lower():
        await update.message.reply_text("‚öôÔ∏è –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
    else:
        await process_query(update, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
async def process_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    mode = context.user_data.get("mode")
    query = update.message.text.strip()

    if mode == "artist":
        search_query = f"{query} official music"
    elif mode == "title":
        search_query = f"{query} official audio"
    elif mode == "mood":
        search_query = f"{query} music playlist"
    else:
        await update.message.reply_text("\u2757 \u0412\u044b\u0431\u0435\u0440\u0438 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0432 \u043c\u0435\u043d\u044e.")
        return

    search = VideosSearch(search_query, limit=1)
    result = search.result()

    if result['result']:
        video = result['result'][0]
        title = video['title']
        url = video['link']

        context.user_data['last_track'] = {'title': title, 'url': url}

        buttons = [
            [InlineKeyboardButton("\ud83d\udd17 –°–ª—É—à–∞—Ç—å –Ω–∞ YouTube", url=url)],
            [InlineKeyboardButton("\u2b07\ufe0f –°–∫–∞—á–∞—Ç—å MP3", callback_data="download_mp3")]
        ]

        await update.message.reply_text(
            f"\ud83c\udfb5 \u041d\u0430\u0439\u0434\u0435\u043d\u0430 \u043f\u0435\u0441\u043d\u044f: {title}\n\u0427\u0442\u043e \u0445\u043e\u0447\u0435\u0448\u044c \u0441\u0434\u0435\u043b\u0430\u0442\u044c?",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
    else:
        await update.message.reply_text("\u274c \u041d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043e. \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0437\u0430\u043f\u0440\u043e\u0441.")

# Inline –∫–Ω–æ–ø–∫–∞: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ mp3
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "download_mp3":
        track = context.user_data.get("last_track")
        if not track:
            await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: —Ç—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        url = track["url"]
        title = track["title"]

        await query.edit_message_text(f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞—é: {title} ...")

        async with download_lock:
            try:
                ydl_opts = {
                    'format': 'bestaudio/best',
                    'outtmpl': 'downloads/%(id)s.%(ext)s',
                    'quiet': True,
                    'postprocessors': [{
                        'key': 'FFmpegExtractAudio',
                        'preferredcodec': 'mp3',
                        'preferredquality': '192',
                    }]
                }

                with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                    info = ydl.extract_info(url, download=True)
                    filename = f"downloads/{info['id']}.mp3"

                with open(filename, "rb") as audio:
                    await context.bot.send_audio(chat_id=update.effective_chat.id, audio=audio, title=title)

                os.remove(filename)
                await context.bot.send_message(chat_id=update.effective_chat.id, text="‚úÖ –ì–æ—Ç–æ–≤–æ!")
            except Exception as e:
                await context.bot.send_message(chat_id=update.effective_chat.id, text=f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons))
app.add_handler(CallbackQueryHandler(handle_callback))

app.run_webhook(
    listen="0.0.0.0",
    port=int(os.environ.get("PORT", 8443)),
    webhook_url=WEBHOOK_URL
)

